name: building_from_scratch


on:
  workflow_dispatch:
    # branches: [ "main"]
jobs:
  install_tf:
    runs-on: self-hosted
    
    steps:
      - name: checkout repo for terraform deployments
        uses: actions/checkout@v2
                          ###############################    INSTALL TERRAFORM AND AWS CLI        ##################################
      - name: Install Terraform & aws cli
       
        run: |
          ls
          sudo apt install wget
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          sudo wget -O- https://apt.releases.hashicorp.com/gpg | \
          sudo gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          sudo gpg --no-default-keyring \
          --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
          --fingerprint
          echo " stage 1"
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list
          echo "stage 2"
          sudo apt update
          sudo apt-get install terraform
          
      - name: check version   
        run: terraform --version
        
      - name: install AWS cli for terraform permissions on AWS
        run: |
          # Check if AWS CLI is already installed
          if ! command -v aws &> /dev/null
          then
          sudo apt install unzip
          # If not installed, download and unzip AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          # Execute AWS CLI installation script
          sudo ./aws/install
          else
          echo "AWS CLI is already installed, skipping installation."
          fi
                                            #############################   CONFIGURE AWS      ################################################
  configuring_aws:
    # this will supposedly be on the SAME runner
    needs: install_tf 
    runs-on: self-hosted
    steps:
      - name: configure AWS
        run: |
          ls
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile default
          aws configure set aws_secret_access_key ${{ secrets.AWS_ACCESS_KEY_SECRET }} --profile default
          aws configure set region eu-west-2 --profile default
          aws sts get-caller-identity
                                            ######################   secret keys / private pub to be passed to communicate with aws for Terraform ###################################
  pass_keys:
    needs: install_tf
    runs-on: self-hosted
    steps: 
      - name: Create SSH Directory and Files
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/id_rsa
          touch ~/.ssh/id_rsa.pub
      - name: pass private key 
        run: |
          echo "${{ secrets.ARIEL_KEY }}" | tee ~/.ssh/id_rsa > /dev/null
          chmod 600 ~/.ssh/id_rsa
      - name: pass public
        run: |
          echo "${{ secrets.ID_RSA_PUB }}" | tee ~/.ssh/id_rsa.pub > /dev/null

                                ####################### Terraform Startup initializing & terraforming ansible & cluster instances  ##########################################
          
  starting_up_TF:
    # do simple init and check plan
    needs: configuring_aws
    runs-on: self-hosted
    steps:
      - name: check current dir
        run : pwd
      - name: initiliazing terraform
        run: terraform init
      - name: are there files?
        run : ls
      - name: start plan
        run: terraform plan
      - name: apply
        run: terraform apply -auto-approve
                                        ######## CLUSTER creation and ADD ONs (ArgoCD, Prometheus) ##########################
  create_cluster:
    runs-on: self-hosted
    needs: starting_up_TF
    steps:
      - name: one script to bind them all
        run: bash ./scripts/TF_apply.sh      
        # this script runs:
        # ipcollecter.sh
        # kubespraying.sh
        # updatehosts.sh
        # install_argocd.sh
        # install prometheus.sh
        
        # 
        
    
